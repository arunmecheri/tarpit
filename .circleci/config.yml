# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints:
            - "0e:d2:f5:ca:e5:40:f6:23:d8:d1:58:db:80:3a:4c:df"

      # Download and cache dependencies!
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
     
     # Install SL agent!
      - run: 
          name: Install Shiftleft agent!
          command: curl https://www.shiftleft.io/download/sl-latest-linux-x64.tar.gz > /tmp/sl.tar.gz && sudo tar -C /usr/local/bin -xzf /tmp/sl.tar.gz

    # Install Ocular!
      - run: 
          name: Install Ocular Installation!
          command: sl update ocular
     
     # build the apps!
      - run: 
          name: Build the application!
          command: mvn clean package

      # run tests!
      - run: mvn integration-test
      
      # Get analysis scripts!
      - run: 
          name: Get hardcoded literal Analysis scripts
          command: |
            cd /home/circleci/.shiftleft/ocular/
            git clone git@github.com:alokshukla1978/scripts-internal.git
      
      # Analyze for security!
      - run: 
          name: Analyze for hardcoded literals
          command: |
            cd /home/circleci/.shiftleft/ocular/
            /home/circleci/.shiftleft/ocular/ocular.sh --script /home/circleci/.shiftleft/ocular/scripts-internal/java/sensitive/main.sc --params payloadType=WAR,payload=/home/circleci/repo/target/servlettarpit.war,scriptType=SENSITIVE_LITERAL,nameSpace=".*(io.shiftleft).*",outFile=sensitive_literal.json
  
      # Print hardcoded literals!
      - run: 
          name: Hardcoded results printed
          command: cat /home/circleci/.shiftleft/ocular/sensitive_literal.json
  
     # Test Security Results
      - run:
          name: Assert build quality against security standards
          command: |
              echo 'CIRCLE PULL REQUEST ' $CIRCLE_PULL_REQUEST
              echo $CIRCLE_PULL_REQUEST
              RESULTFOUND=$(jq .count /home/circleci/.shiftleft/ocular/sensitive_literal.json)
              if [ "$RESULTFOUND" -eq "0" ]; then
                  PR_COMMENT="No Hardcoded secrets were found. This PR can be merged."
              else
                  PR_COMMENT="ShiftLeft found vulnerabilities that violate policy. Go here for more details"
                  SECRET_DATA_ELEMENT=$(jq .sensitiveData[0].dataElement /home/circleci/.shiftleft/ocular/sensitive_literal.json)
                  SECRET_DATA_TYPE_1=$(jq .sensitiveData[0].dataTags[1] /home/circleci/.shiftleft/ocular/sensitive_literal.json)
                  SECRET_DATA_TYPE_2=$(jq .sensitiveData[0].dataTags[2] /home/circleci/.shiftleft/ocular/sensitive_literal.json)
                  SECRET_DATA_FILE_PART=$(jq -r .sensitiveData[0].flows[0][0].fileName /home/circleci/.shiftleft/ocular/sensitive_literal.json)
                  SECRET_DATA_FILE_FULLNAME="src/main/java/"
                  SECRET_DATA_FILE_FULLNAME+=SECRET_DATA_FILE_PART
                  SECRET_DATA_FILE_LINE_NUMBER=$(jq -r .sensitiveData[0].flows[0][0].lineNumber /home/circleci/.shiftleft/ocular/sensitive_literal.json)
              fi
              if [ ! -z "$CIRCLE_PULL_REQUEST" ]; then
                  PR_USER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f4)
                  PR_REPO=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f5)
                  PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f7)
                  curl -H "Authorization: token $GH_AUTH_TOKEN" -X POST -d "{\"path\": \"$SECRET_DATA_FILE_FULLNAME\", \"line\": $SECRET_DATA_FILE_LINE_NUMBER, \"side\": \"LEFT\",  \"body\": \"$PR_COMMENT\"}" https://api.github.com/repos/$PR_USER/$PR_REPO/issues/$PR_NUMBER/comments
                  if [ ! $(echo $BUILD_RESULT | grep "success") ]; then
                      echo "Failing the build since PR violates security policy"
                      exit 1
                  fi
              else
                  echo "No PR information. Was this a commit/merge to the master branch?"
                   if [ ! $(echo $BUILD_RESULT | grep "success") ]; then
                      echo "Failing the build since commit/merge violates security policy"
                      exit 1
                  fi
              fi
    
      
